package toppanmerrill.oracle.apps.xxtm.cb.invoice.server;

import java.math.BigDecimal;

import java.sql.Types;

import oracle.apps.fnd.framework.OAException;
import oracle.apps.fnd.framework.server.OAApplicationModuleImpl;

import oracle.apps.fnd.framework.server.OADBTransaction;

import oracle.apps.fnd.framework.server.OADBTransactionImpl;

import oracle.jbo.server.ViewLinkImpl;

import oracle.jdbc.OracleTypes;
import oracle.jdbc.internal.OracleCallableStatement;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SearchInvoiceAMImpl extends OAApplicationModuleImpl {
    /**This is the default constructor (do not remove)
     */
    public SearchInvoiceAMImpl() {
    }


    /**Container's getter for SearchInvoiceVO1
     */
    public SearchInvoiceVOImpl getSearchInvoiceVO1() {
        return (SearchInvoiceVOImpl)findViewObject("SearchInvoiceVO1");
    }


    /**Container's getter for ActiveBillerLovVO1
     */
    public ActiveBillerLovVOImpl getActiveBillerLovVO1() {
        return (ActiveBillerLovVOImpl)findViewObject("ActiveBillerLovVO1");
    }

    /**Container's getter for InvoiceStatusLovVO1
     */
    public InvoiceStatusLovVOImpl InvoiceStatusLovVO1() {
        return (InvoiceStatusLovVOImpl)findViewObject("InvoiceStatusLovVO1");
    }


    /**Container's getter for InvoiceVO1
     */
    public InvoiceVOImpl getInvoiceVO1() {
        return (InvoiceVOImpl)findViewObject("InvoiceVO1");
    }


    /**Container's getter for InvoiceSalesRepSplitsVO1
     */
    public InvoiceSalesRepSplitsVOImpl getInvoiceSalesRepSplitsVO1() {
        return (InvoiceSalesRepSplitsVOImpl)findViewObject("InvoiceSalesRepSplitsVO1");
    }


    /**Container's getter for InvoiceToInvoiceSalesRepSplitVL1
     */
    public ViewLinkImpl getInvoiceToInvoiceSalesRepSplitVL1() {
        return (ViewLinkImpl)findViewLink("InvoiceToInvoiceSalesRepSplitVL1");
    }

    /**Container's getter for InvoiceStatusLovVO1
     */
    public InvoiceStatusLovVOImpl getInvoiceStatusLovVO1() {
        return (InvoiceStatusLovVOImpl)findViewObject("InvoiceStatusLovVO1");
    }

    /**Sample main for debugging Business Components code using the tester.
     */
    public static void main(String[] args) {
        launchTester("toppanmerrill.oracle.apps.xxtm.cb.invoice.server", /* package name */
      "SearchInvoiceAMLocal" /* Configuration Name */);
    }

    /**Container's getter for InvoiceLineVO1
     */
    public InvoiceLineVOImpl getInvoiceLineVO1() {
        return (InvoiceLineVOImpl)findViewObject("InvoiceLineVO1");
    }

    /**Container's getter for InvoiceToInvoiceLineVL1
     */
    public ViewLinkImpl getInvoiceToInvoiceLineVL1() {
        return (ViewLinkImpl)findViewLink("InvoiceToInvoiceLineVL1");
    }

    /**Container's getter for PrimaryProductTypeLovVO1
     */
    public PrimaryProductTypeLovVOImpl getPrimaryProductTypeLovVO1() {
        return (PrimaryProductTypeLovVOImpl)findViewObject("PrimaryProductTypeLovVO1");
    }

    /**Container's getter for CustomerLovVO1
     */
    public CustomerLovVOImpl getCustomerLovVO1() {
        return (CustomerLovVOImpl)findViewObject("CustomerLovVO1");
    }

    /**Container's getter for GLPeriodNameLovVO1
     */
    public GLPeriodNameLovVOImpl getGLPeriodNameLovVO1() {
        return (GLPeriodNameLovVOImpl)findViewObject("GLPeriodNameLovVO1");
    }

    /**Container's getter for CustomerAddressLovVO1
     */
    public CustomerAddressLovVOImpl getCustomerAddressLovVO1() {
        return (CustomerAddressLovVOImpl)findViewObject("CustomerAddressLovVO1");
    }

    /**Container's getter for CustomerContactLovVO1
     */
    public CustomerContactLovVOImpl getCustomerContactLovVO1() {
        return (CustomerContactLovVOImpl)findViewObject("CustomerContactLovVO1");
    }


    /**Container's getter for InvoiceAuditVO1
     */
    public InvoiceAuditVOImpl getInvoiceAuditVO1() {
        return (InvoiceAuditVOImpl)findViewObject("InvoiceAuditVO1");
    }


    /**Container's getter for InvoiceToInvoiceAuditVL1
     */
    public ViewLinkImpl getInvoiceToInvoiceAuditVL1() {
        return (ViewLinkImpl)findViewLink("InvoiceToInvoiceAuditVL1");
    }

    /**Container's getter for InvoiceChangeActivityVO1
     */
    public InvoiceChangeActivityVOImpl getInvoiceChangeActivityVO1() {
        return (InvoiceChangeActivityVOImpl)findViewObject("InvoiceChangeActivityVO1");
    }

    /**Container's getter for InvoiceToInvoiceChangeActivityVL1
     */
    public ViewLinkImpl getInvoiceToInvoiceChangeActivityVL1() {
        return (ViewLinkImpl)findViewLink("InvoiceToInvoiceChangeActivityVL1");
    }

    /**Container's getter for InvoiceApprovalActivityVO1
     */
    public InvoiceApprovalActivityVOImpl getInvoiceApprovalActivityVO1() {
        return (InvoiceApprovalActivityVOImpl)findViewObject("InvoiceApprovalActivityVO1");
    }

    /**Container's getter for InvoiceToInvoiceApprovalActivityVL1
     */
    public ViewLinkImpl getInvoiceToInvoiceApprovalActivityVL1() {
        return (ViewLinkImpl)findViewLink("InvoiceToInvoiceApprovalActivityVL1");
    }
    
    
    public String submitToReview(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.submit_to_review(:1 , :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
      oraclecallablestatement.setString(1,  customerTrxId );

      oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

      oraclecallablestatement.execute();
                       
       retValues = oraclecallablestatement.getString(2);
       msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e );
     }
     return retValues;
    }    
    
    public String submitToMgrReview(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.submit_to_mgr_review(:1 , :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
      oraclecallablestatement.setString(1,  customerTrxId );

      oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

      oraclecallablestatement.execute();
                       
       retValues = oraclecallablestatement.getString(2);
       msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e );
     }
     return retValues;
    }    
    
    public String triggerMgrReviewWF(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.trigger_mgr_review_wf(:1 , :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
      oraclecallablestatement.setString(1,  customerTrxId );

      oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

      oraclecallablestatement.execute();
                       
       retValues = oraclecallablestatement.getString(2);
       msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e );
     }
     return retValues;
    }    
    
    public String submitToAR(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.submit_to_ar(:1 , :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
      oraclecallablestatement.setString(1,  customerTrxId );

      oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

      oraclecallablestatement.execute();
                       
       retValues = oraclecallablestatement.getString(2);
       msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e );
     }
     return retValues;
    }        
    
    public String submitForApprovalVoid(String combineReqId, String approvalReason, String justification)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.submit_approval_void(:1, :2 ,:3, :4, :5); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  combineReqId );
         oraclecallablestatement.setString(2,  approvalReason );
         oraclecallablestatement.setString(3,  justification );

         oraclecallablestatement.registerOutParameter(4, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(5, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(4);
         msgValues = oraclecallablestatement.getString(5);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String approveVoid(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.approve_void(:1, :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  customerTrxId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String rejectVoid(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.reject_void(:1, :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  customerTrxId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    
    
    
    public String submitForApprovalRevise(String customerTrxId, int reviseToNum, String approvalReason, String justification)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.submit_approval_revise(:1, :2 ,:3, :4, :5, :6); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  customerTrxId );
         oraclecallablestatement.setInt(2,  reviseToNum );
         oraclecallablestatement.setString(3,  approvalReason );
         oraclecallablestatement.setString(4,  justification );

         oraclecallablestatement.registerOutParameter(5, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(6, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(5);
         msgValues = oraclecallablestatement.getString(6);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String approveRevise(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.approve_revise(:1, :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  customerTrxId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String rejectRevise(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.reject_revise(:1, :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  customerTrxId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    
    
    
    public String performAudit(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.perform_audit(:1 , :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
      oraclecallablestatement.setString(1,  customerTrxId );

      oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

      oraclecallablestatement.execute();
                       
       retValues = oraclecallablestatement.getString(2);
       msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e );
     }
     return retValues;
    }            
    
    
    public String performPrint(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.perform_print(:1 , :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
      oraclecallablestatement.setString(1,  customerTrxId );

      oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

      oraclecallablestatement.execute();
                       
       retValues = oraclecallablestatement.getString(2);
       msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e );
     }
     return retValues;
    }



    public String copy(String customerTrxId, String customerTrxTypeId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String newCustTrxId;
     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.copy_final_invoice(:1 , :2 ,:3, :4, :5 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  customerTrxId );
         oraclecallablestatement.setString(2,  customerTrxTypeId );

         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(4, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(5, java.sql.Types.VARCHAR);

         oraclecallablestatement.execute();
                       

         newCustTrxId =  oraclecallablestatement.getString(3);
         retValues = oraclecallablestatement.getString(4);
         msgValues = oraclecallablestatement.getString(5);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return newCustTrxId;
    }

    public String checkTrxForRevise(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.check_trx_for_revise(:1 , :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  customerTrxId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

         oraclecallablestatement.execute();
                       
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }



    public String checkParentForCombine(String parentCustomerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.check_parent_for_combine(:1 , :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  parentCustomerTrxId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

         oraclecallablestatement.execute();
                       
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }
    
    public String checkChildForCombine(String parentCustomerTrxId, String childCustomerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.checkChildForCombine(:1 , :2 ,:3, :4 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  parentCustomerTrxId );
         oraclecallablestatement.setString(2,  childCustomerTrxId );

         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(4, java.sql.Types.VARCHAR);

         oraclecallablestatement.execute();
                       
         retValues = oraclecallablestatement.getString(3);
         msgValues = oraclecallablestatement.getString(4);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String checkTrxGLPeriod(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");     
     str.append( " xxbs_invoice_pkg.check_gl_period_open(:1 , :2 , :3); ");
     str.append( " END; ");     

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  customerTrxId );
         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

         oraclecallablestatement.execute();
                       
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
           if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }

    public String checkPaymentTerm(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");     
     str.append( " xxbs_invoice_pkg.check_payment_term_active(:1 , :2 , :3); ");
     str.append( " END; ");     

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  customerTrxId );
         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

         oraclecallablestatement.execute();
                       
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
           if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }
    
    public String createCombineReq(String parentCustomerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String newCombineReqId;
     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.create_combine_req(:1 , :2 ,:3, :4); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  parentCustomerTrxId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(4, java.sql.Types.VARCHAR);

         oraclecallablestatement.execute();
                 
         newCombineReqId =oraclecallablestatement.getString(2);
         retValues = oraclecallablestatement.getString(3);
         msgValues = oraclecallablestatement.getString(4);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return newCombineReqId;
    }

    public String submitApprovalCombineReq(String combineReqId, String approvalReason, String justification)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.submit_approval_combine_req(:1, :2 ,:3, :4, :5); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  combineReqId );
         oraclecallablestatement.setString(2,  approvalReason );
         oraclecallablestatement.setString(3,  justification );

         oraclecallablestatement.registerOutParameter(4, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(5, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(4);
         msgValues = oraclecallablestatement.getString(5);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String approveCombineReq(String combineReqId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.approve_combine_req(:1, :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  combineReqId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String rejectCombineReq(String combineReqId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.reject_combine_req(:1, :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  combineReqId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String createUncombineReq(String parentCustomerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String newCombineReqId;
     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.create_uncombine_req(:1 , :2 ,:3, :4); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  parentCustomerTrxId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(4, java.sql.Types.VARCHAR);

         oraclecallablestatement.execute();
                 
         newCombineReqId =oraclecallablestatement.getString(2);
         retValues = oraclecallablestatement.getString(3);
         msgValues = oraclecallablestatement.getString(4);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return newCombineReqId;
    }

    public String submitApprovalUncombineReq(String combineReqId, String approvalReason, String justification)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.submit_approval_uncombine_req(:1, :2 ,:3, :4, :5); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  combineReqId );
         oraclecallablestatement.setString(2,  approvalReason );
         oraclecallablestatement.setString(3,  justification );

         oraclecallablestatement.registerOutParameter(4, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(5, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(4);
         msgValues = oraclecallablestatement.getString(5);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String approveUncombineReq(String combineReqId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.approve_uncombine_req(:1, :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  combineReqId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    

    public String rejectUncombineReq(String combineReqId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();


     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.reject_uncombine_req(:1, :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
         oraclecallablestatement.setString(1,  combineReqId );

         oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
         oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);


         oraclecallablestatement.execute();
                 
         retValues = oraclecallablestatement.getString(2);
         msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e);
     }
     return retValues;
    }    
    
    public String resetDefaultSalesRep(String customerTrxId)
    { 
     OADBTransaction oadbtransaction = (OADBTransaction)getTransaction();
      OADBTransactionImpl oadbtransactionimpl = (OADBTransactionImpl)getTransaction();

     String retValues;
     String msgValues;
     StringBuffer str = new StringBuffer();
     str.append( " BEGIN ");
     str.append( " xxbs_invoice_pkg.reset_default_sales_rep(:1 , :2 ,:3 ); ");
     str.append( " END; ");

     OracleCallableStatement oraclecallablestatement =
      (OracleCallableStatement)oadbtransaction.createCallableStatement(str.toString(), OADBTransaction.DEFAULT);

     try{
      oraclecallablestatement.setString(1,  customerTrxId );

      oraclecallablestatement.registerOutParameter(2, java.sql.Types.VARCHAR);
      oraclecallablestatement.registerOutParameter(3, java.sql.Types.VARCHAR);

      oraclecallablestatement.execute();
                       
       retValues = oraclecallablestatement.getString(2);
       msgValues = oraclecallablestatement.getString(3);
       
       if (!retValues.equals("S")){
           //oadbtransaction.rollback();
           throw new OAException(msgValues, OAException.ERROR);            
       }else{
           //oadbtransaction.commit();
       }
     }
     catch(Exception e)
     {
      throw OAException.wrapperException(e );
     }
     return retValues;
    }


    
    /**Container's getter for InvoiceLineTypeLovVO1
     */
    public InvoiceLineTypeLovVOImpl getInvoiceLineTypeLovVO1() {
        return (InvoiceLineTypeLovVOImpl)findViewObject("InvoiceLineTypeLovVO1");
    }

    /**Container's getter for InvoiceTrxTypeLovVO1
     */
    public InvoiceTrxTypeLovVOImpl getInvoiceTrxTypeLovVO1() {
        return (InvoiceTrxTypeLovVOImpl)findViewObject("InvoiceTrxTypeLovVO1");
    }

    /**Container's getter for InvoiceCombineReqVO1
     */
    public InvoiceCombineReqVOImpl getInvoiceCombineReqVO1() {
        return (InvoiceCombineReqVOImpl)findViewObject("InvoiceCombineReqVO1");
    }

    /**Container's getter for InvoiceCombineReqDtlVO1
     */
    public InvoiceCombineReqDtlVOImpl getInvoiceCombineReqDtlVO1() {
        return (InvoiceCombineReqDtlVOImpl)findViewObject("InvoiceCombineReqDtlVO1");
    }

    /**Container's getter for InvoiceCombineReqVL1
     */
    public ViewLinkImpl getInvoiceCombineReqVL1() {
        return (ViewLinkImpl)findViewLink("InvoiceCombineReqVL1");
    }

    /**Container's getter for SearchInvoiceLovVO1
     */
    public SearchInvoiceLovVOImpl getSearchInvoiceLovVO1() {
        return (SearchInvoiceLovVOImpl)findViewObject("SearchInvoiceLovVO1");
    }

    /**Container's getter for SearchCombineReqVO1
     */
    public SearchCombineReqVOImpl getSearchCombineReqVO1() {
        return (SearchCombineReqVOImpl)findViewObject("SearchCombineReqVO1");
    }

    /**Container's getter for InvoiceVoidVO1
     */
    public InvoiceVoidVOImpl getInvoiceVoidVO1() {
        return (InvoiceVoidVOImpl)findViewObject("InvoiceVoidVO1");
    }

    /**Container's getter for InvoiceApprovalReasonLovVO1
     */
    public InvoiceApprovalReasonLovVOImpl getInvoiceApprovalReasonLovVO1() {
        return (InvoiceApprovalReasonLovVOImpl)findViewObject("InvoiceApprovalReasonLovVO1");
    }

    /**Container's getter for InvoiceCombineReqStatusLovVO1
     */
    public InvoiceCombineReqStatusLovVOImpl getInvoiceCombineReqStatusLovVO1() {
        return (InvoiceCombineReqStatusLovVOImpl)findViewObject("InvoiceCombineReqStatusLovVO1");
    }

    /**Container's getter for SecCustomerLovVO1
     */
    public SecCustomerLovVOImpl getSecCustomerLovVO1() {
        return (SecCustomerLovVOImpl)findViewObject("SecCustomerLovVO1");
    }

    /**Container's getter for InvoiceReviseVO1
     */
    public InvoiceReviseVOImpl getInvoiceReviseVO1() {
        return (InvoiceReviseVOImpl)findViewObject("InvoiceReviseVO1");
    }

    /**Container's getter for PaymentTermLovVO1
     */
    public PaymentTermLovVOImpl getPaymentTermLovVO1() {
        return (PaymentTermLovVOImpl)findViewObject("PaymentTermLovVO1");
    }

    /**Container's getter for SalesRepLovVO1
     */
    public SalesRepLovVOImpl getSalesRepLovVO1() {
        return (SalesRepLovVOImpl)findViewObject("SalesRepLovVO1");
    }
}
